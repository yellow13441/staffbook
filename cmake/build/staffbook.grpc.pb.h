// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: staffbook.proto
// Original file comments:
// See README.txt for information and build instructions.
//
// Note: START and END tags are used in comments to define sections used in
// tutorials.  They are not part of the syntax for Protocol Buffers.
//
// To get an in-depth walkthrough of this file and the related examples, see:
// https://developers.google.com/protocol-buffers/docs/tutorials
//
// [START declaration]
#ifndef GRPC_staffbook_2eproto__INCLUDED
#define GRPC_staffbook_2eproto__INCLUDED

#include "staffbook.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace staffbook {

class CURD final {
 public:
  static constexpr char const* service_full_name() {
    return "staffbook.CURD";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a query request by id
    virtual ::grpc::Status AddEmployee(::grpc::ClientContext* context, const ::staffbook::Employee& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAddEmployee(::grpc::ClientContext* context, const ::staffbook::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAddEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAddEmployee(::grpc::ClientContext* context, const ::staffbook::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAddEmployeeRaw(context, request, cq));
    }
    virtual ::grpc::Status ListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::staffbook::StaffBook* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::StaffBook>> AsyncListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::StaffBook>>(AsyncListEmployeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::StaffBook>> PrepareAsyncListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::StaffBook>>(PrepareAsyncListEmployeesRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryEmployeeByID(::grpc::ClientContext* context, const ::staffbook::IDRequest& request, ::staffbook::Employee* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::Employee>> AsyncQueryEmployeeByID(::grpc::ClientContext* context, const ::staffbook::IDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::Employee>>(AsyncQueryEmployeeByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::Employee>> PrepareAsyncQueryEmployeeByID(::grpc::ClientContext* context, const ::staffbook::IDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::Employee>>(PrepareAsyncQueryEmployeeByIDRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends a query request by id
      virtual void AddEmployee(::grpc::ClientContext* context, const ::staffbook::Employee* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddEmployee(::grpc::ClientContext* context, const ::staffbook::Employee* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::staffbook::StaffBook* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::staffbook::StaffBook* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryEmployeeByID(::grpc::ClientContext* context, const ::staffbook::IDRequest* request, ::staffbook::Employee* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryEmployeeByID(::grpc::ClientContext* context, const ::staffbook::IDRequest* request, ::staffbook::Employee* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAddEmployeeRaw(::grpc::ClientContext* context, const ::staffbook::Employee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAddEmployeeRaw(::grpc::ClientContext* context, const ::staffbook::Employee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::StaffBook>* AsyncListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::StaffBook>* PrepareAsyncListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::Employee>* AsyncQueryEmployeeByIDRaw(::grpc::ClientContext* context, const ::staffbook::IDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::staffbook::Employee>* PrepareAsyncQueryEmployeeByIDRaw(::grpc::ClientContext* context, const ::staffbook::IDRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddEmployee(::grpc::ClientContext* context, const ::staffbook::Employee& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAddEmployee(::grpc::ClientContext* context, const ::staffbook::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAddEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAddEmployee(::grpc::ClientContext* context, const ::staffbook::Employee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAddEmployeeRaw(context, request, cq));
    }
    ::grpc::Status ListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::staffbook::StaffBook* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::staffbook::StaffBook>> AsyncListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::staffbook::StaffBook>>(AsyncListEmployeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::staffbook::StaffBook>> PrepareAsyncListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::staffbook::StaffBook>>(PrepareAsyncListEmployeesRaw(context, request, cq));
    }
    ::grpc::Status QueryEmployeeByID(::grpc::ClientContext* context, const ::staffbook::IDRequest& request, ::staffbook::Employee* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::staffbook::Employee>> AsyncQueryEmployeeByID(::grpc::ClientContext* context, const ::staffbook::IDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::staffbook::Employee>>(AsyncQueryEmployeeByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::staffbook::Employee>> PrepareAsyncQueryEmployeeByID(::grpc::ClientContext* context, const ::staffbook::IDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::staffbook::Employee>>(PrepareAsyncQueryEmployeeByIDRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddEmployee(::grpc::ClientContext* context, const ::staffbook::Employee* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddEmployee(::grpc::ClientContext* context, const ::staffbook::Employee* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::staffbook::StaffBook* response, std::function<void(::grpc::Status)>) override;
      void ListEmployees(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::staffbook::StaffBook* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryEmployeeByID(::grpc::ClientContext* context, const ::staffbook::IDRequest* request, ::staffbook::Employee* response, std::function<void(::grpc::Status)>) override;
      void QueryEmployeeByID(::grpc::ClientContext* context, const ::staffbook::IDRequest* request, ::staffbook::Employee* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAddEmployeeRaw(::grpc::ClientContext* context, const ::staffbook::Employee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAddEmployeeRaw(::grpc::ClientContext* context, const ::staffbook::Employee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::staffbook::StaffBook>* AsyncListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::staffbook::StaffBook>* PrepareAsyncListEmployeesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::staffbook::Employee>* AsyncQueryEmployeeByIDRaw(::grpc::ClientContext* context, const ::staffbook::IDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::staffbook::Employee>* PrepareAsyncQueryEmployeeByIDRaw(::grpc::ClientContext* context, const ::staffbook::IDRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddEmployee_;
    const ::grpc::internal::RpcMethod rpcmethod_ListEmployees_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryEmployeeByID_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a query request by id
    virtual ::grpc::Status AddEmployee(::grpc::ServerContext* context, const ::staffbook::Employee* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status ListEmployees(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::staffbook::StaffBook* response);
    virtual ::grpc::Status QueryEmployeeByID(::grpc::ServerContext* context, const ::staffbook::IDRequest* request, ::staffbook::Employee* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddEmployee() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::staffbook::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEmployee(::grpc::ServerContext* context, ::staffbook::Employee* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListEmployees() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::staffbook::StaffBook* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListEmployees(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::staffbook::StaffBook>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryEmployeeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryEmployeeByID() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_QueryEmployeeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryEmployeeByID(::grpc::ServerContext* /*context*/, const ::staffbook::IDRequest* /*request*/, ::staffbook::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryEmployeeByID(::grpc::ServerContext* context, ::staffbook::IDRequest* request, ::grpc::ServerAsyncResponseWriter< ::staffbook::Employee>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddEmployee<WithAsyncMethod_ListEmployees<WithAsyncMethod_QueryEmployeeByID<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddEmployee() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::staffbook::Employee, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::staffbook::Employee* request, ::google::protobuf::Empty* response) { return this->AddEmployee(context, request, response); }));}
    void SetMessageAllocatorFor_AddEmployee(
        ::grpc::MessageAllocator< ::staffbook::Employee, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::staffbook::Employee, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::staffbook::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::staffbook::Employee* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListEmployees() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::staffbook::StaffBook>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::staffbook::StaffBook* response) { return this->ListEmployees(context, request, response); }));}
    void SetMessageAllocatorFor_ListEmployees(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::staffbook::StaffBook>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::staffbook::StaffBook>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::staffbook::StaffBook* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListEmployees(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::staffbook::StaffBook* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryEmployeeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryEmployeeByID() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::staffbook::IDRequest, ::staffbook::Employee>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::staffbook::IDRequest* request, ::staffbook::Employee* response) { return this->QueryEmployeeByID(context, request, response); }));}
    void SetMessageAllocatorFor_QueryEmployeeByID(
        ::grpc::MessageAllocator< ::staffbook::IDRequest, ::staffbook::Employee>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::staffbook::IDRequest, ::staffbook::Employee>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryEmployeeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryEmployeeByID(::grpc::ServerContext* /*context*/, const ::staffbook::IDRequest* /*request*/, ::staffbook::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryEmployeeByID(
      ::grpc::CallbackServerContext* /*context*/, const ::staffbook::IDRequest* /*request*/, ::staffbook::Employee* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddEmployee<WithCallbackMethod_ListEmployees<WithCallbackMethod_QueryEmployeeByID<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddEmployee() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::staffbook::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListEmployees() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::staffbook::StaffBook* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryEmployeeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryEmployeeByID() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_QueryEmployeeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryEmployeeByID(::grpc::ServerContext* /*context*/, const ::staffbook::IDRequest* /*request*/, ::staffbook::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddEmployee() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::staffbook::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEmployee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListEmployees() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::staffbook::StaffBook* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListEmployees(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryEmployeeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryEmployeeByID() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_QueryEmployeeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryEmployeeByID(::grpc::ServerContext* /*context*/, const ::staffbook::IDRequest* /*request*/, ::staffbook::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryEmployeeByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddEmployee() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddEmployee(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::staffbook::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListEmployees() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListEmployees(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::staffbook::StaffBook* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListEmployees(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryEmployeeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryEmployeeByID() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryEmployeeByID(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryEmployeeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryEmployeeByID(::grpc::ServerContext* /*context*/, const ::staffbook::IDRequest* /*request*/, ::staffbook::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryEmployeeByID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddEmployee() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::staffbook::Employee, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::staffbook::Employee, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedAddEmployee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddEmployee(::grpc::ServerContext* /*context*/, const ::staffbook::Employee* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddEmployee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::staffbook::Employee,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListEmployees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListEmployees() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::staffbook::StaffBook>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::staffbook::StaffBook>* streamer) {
                       return this->StreamedListEmployees(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListEmployees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListEmployees(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::staffbook::StaffBook* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListEmployees(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::staffbook::StaffBook>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryEmployeeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryEmployeeByID() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::staffbook::IDRequest, ::staffbook::Employee>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::staffbook::IDRequest, ::staffbook::Employee>* streamer) {
                       return this->StreamedQueryEmployeeByID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryEmployeeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryEmployeeByID(::grpc::ServerContext* /*context*/, const ::staffbook::IDRequest* /*request*/, ::staffbook::Employee* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryEmployeeByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::staffbook::IDRequest,::staffbook::Employee>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddEmployee<WithStreamedUnaryMethod_ListEmployees<WithStreamedUnaryMethod_QueryEmployeeByID<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddEmployee<WithStreamedUnaryMethod_ListEmployees<WithStreamedUnaryMethod_QueryEmployeeByID<Service > > > StreamedService;
};

}  // namespace staffbook


#endif  // GRPC_staffbook_2eproto__INCLUDED
