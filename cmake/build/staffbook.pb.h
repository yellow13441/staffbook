// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: staffbook.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_staffbook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_staffbook_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_staffbook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_staffbook_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_staffbook_2eproto;
namespace staffbook {
class Employee;
struct EmployeeDefaultTypeInternal;
extern EmployeeDefaultTypeInternal _Employee_default_instance_;
class IDRequest;
struct IDRequestDefaultTypeInternal;
extern IDRequestDefaultTypeInternal _IDRequest_default_instance_;
class StaffBook;
struct StaffBookDefaultTypeInternal;
extern StaffBookDefaultTypeInternal _StaffBook_default_instance_;
}  // namespace staffbook
PROTOBUF_NAMESPACE_OPEN
template<> ::staffbook::Employee* Arena::CreateMaybeMessage<::staffbook::Employee>(Arena*);
template<> ::staffbook::IDRequest* Arena::CreateMaybeMessage<::staffbook::IDRequest>(Arena*);
template<> ::staffbook::StaffBook* Arena::CreateMaybeMessage<::staffbook::StaffBook>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace staffbook {

enum Employee_GenderType : int {
  Employee_GenderType_OTHERS = 0,
  Employee_GenderType_MALE = 1,
  Employee_GenderType_FEMALE = 2,
  Employee_GenderType_Employee_GenderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Employee_GenderType_Employee_GenderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Employee_GenderType_IsValid(int value);
constexpr Employee_GenderType Employee_GenderType_GenderType_MIN = Employee_GenderType_OTHERS;
constexpr Employee_GenderType Employee_GenderType_GenderType_MAX = Employee_GenderType_FEMALE;
constexpr int Employee_GenderType_GenderType_ARRAYSIZE = Employee_GenderType_GenderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Employee_GenderType_descriptor();
template<typename T>
inline const std::string& Employee_GenderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Employee_GenderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Employee_GenderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Employee_GenderType_descriptor(), enum_t_value);
}
inline bool Employee_GenderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Employee_GenderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Employee_GenderType>(
    Employee_GenderType_descriptor(), name, value);
}
// ===================================================================

class Employee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:staffbook.Employee) */ {
 public:
  inline Employee() : Employee(nullptr) {}
  ~Employee() override;
  explicit constexpr Employee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Employee(const Employee& from);
  Employee(Employee&& from) noexcept
    : Employee() {
    *this = ::std::move(from);
  }

  inline Employee& operator=(const Employee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Employee& operator=(Employee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Employee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Employee* internal_default_instance() {
    return reinterpret_cast<const Employee*>(
               &_Employee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Employee& a, Employee& b) {
    a.Swap(&b);
  }
  inline void Swap(Employee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Employee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Employee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Employee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Employee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Employee& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Employee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "staffbook.Employee";
  }
  protected:
  explicit Employee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Employee_GenderType GenderType;
  static constexpr GenderType OTHERS =
    Employee_GenderType_OTHERS;
  static constexpr GenderType MALE =
    Employee_GenderType_MALE;
  static constexpr GenderType FEMALE =
    Employee_GenderType_FEMALE;
  static inline bool GenderType_IsValid(int value) {
    return Employee_GenderType_IsValid(value);
  }
  static constexpr GenderType GenderType_MIN =
    Employee_GenderType_GenderType_MIN;
  static constexpr GenderType GenderType_MAX =
    Employee_GenderType_GenderType_MAX;
  static constexpr int GenderType_ARRAYSIZE =
    Employee_GenderType_GenderType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GenderType_descriptor() {
    return Employee_GenderType_descriptor();
  }
  template<typename T>
  static inline const std::string& GenderType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GenderType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GenderType_Name.");
    return Employee_GenderType_Name(enum_t_value);
  }
  static inline bool GenderType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GenderType* value) {
    return Employee_GenderType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kEmailFieldNumber = 5,
    kPhoneFieldNumber = 6,
    kLastUpdatedFieldNumber = 7,
    kIdFieldNumber = 1,
    kAgeFieldNumber = 3,
    kGenderFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 5;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string phone = 6;
  void clear_phone();
  const std::string& phone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // .google.protobuf.Timestamp last_updated = 7;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated();
  public:
  void unsafe_arena_set_allocated_last_updated(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_updated();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 age = 3;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // .staffbook.Employee.GenderType gender = 4;
  void clear_gender();
  ::staffbook::Employee_GenderType gender() const;
  void set_gender(::staffbook::Employee_GenderType value);
  private:
  ::staffbook::Employee_GenderType _internal_gender() const;
  void _internal_set_gender(::staffbook::Employee_GenderType value);
  public:

  // @@protoc_insertion_point(class_scope:staffbook.Employee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_;
  int32_t id_;
  int32_t age_;
  int gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_staffbook_2eproto;
};
// -------------------------------------------------------------------

class StaffBook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:staffbook.StaffBook) */ {
 public:
  inline StaffBook() : StaffBook(nullptr) {}
  ~StaffBook() override;
  explicit constexpr StaffBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StaffBook(const StaffBook& from);
  StaffBook(StaffBook&& from) noexcept
    : StaffBook() {
    *this = ::std::move(from);
  }

  inline StaffBook& operator=(const StaffBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaffBook& operator=(StaffBook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StaffBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const StaffBook* internal_default_instance() {
    return reinterpret_cast<const StaffBook*>(
               &_StaffBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StaffBook& a, StaffBook& b) {
    a.Swap(&b);
  }
  inline void Swap(StaffBook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StaffBook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StaffBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StaffBook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StaffBook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StaffBook& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaffBook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "staffbook.StaffBook";
  }
  protected:
  explicit StaffBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmployeesFieldNumber = 1,
  };
  // repeated .staffbook.Employee employees = 1;
  int employees_size() const;
  private:
  int _internal_employees_size() const;
  public:
  void clear_employees();
  ::staffbook::Employee* mutable_employees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::staffbook::Employee >*
      mutable_employees();
  private:
  const ::staffbook::Employee& _internal_employees(int index) const;
  ::staffbook::Employee* _internal_add_employees();
  public:
  const ::staffbook::Employee& employees(int index) const;
  ::staffbook::Employee* add_employees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::staffbook::Employee >&
      employees() const;

  // @@protoc_insertion_point(class_scope:staffbook.StaffBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::staffbook::Employee > employees_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_staffbook_2eproto;
};
// -------------------------------------------------------------------

class IDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:staffbook.IDRequest) */ {
 public:
  inline IDRequest() : IDRequest(nullptr) {}
  ~IDRequest() override;
  explicit constexpr IDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IDRequest(const IDRequest& from);
  IDRequest(IDRequest&& from) noexcept
    : IDRequest() {
    *this = ::std::move(from);
  }

  inline IDRequest& operator=(const IDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDRequest& operator=(IDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IDRequest* internal_default_instance() {
    return reinterpret_cast<const IDRequest*>(
               &_IDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IDRequest& a, IDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IDRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "staffbook.IDRequest";
  }
  protected:
  explicit IDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:staffbook.IDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_staffbook_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Employee

// int32 id = 1;
inline void Employee::clear_id() {
  id_ = 0;
}
inline int32_t Employee::_internal_id() const {
  return id_;
}
inline int32_t Employee::id() const {
  // @@protoc_insertion_point(field_get:staffbook.Employee.id)
  return _internal_id();
}
inline void Employee::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void Employee::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:staffbook.Employee.id)
}

// string name = 2;
inline void Employee::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Employee::name() const {
  // @@protoc_insertion_point(field_get:staffbook.Employee.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Employee::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:staffbook.Employee.name)
}
inline std::string* Employee::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:staffbook.Employee.name)
  return _s;
}
inline const std::string& Employee::_internal_name() const {
  return name_.Get();
}
inline void Employee::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Employee::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Employee::release_name() {
  // @@protoc_insertion_point(field_release:staffbook.Employee.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Employee::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:staffbook.Employee.name)
}

// int32 age = 3;
inline void Employee::clear_age() {
  age_ = 0;
}
inline int32_t Employee::_internal_age() const {
  return age_;
}
inline int32_t Employee::age() const {
  // @@protoc_insertion_point(field_get:staffbook.Employee.age)
  return _internal_age();
}
inline void Employee::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void Employee::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:staffbook.Employee.age)
}

// .staffbook.Employee.GenderType gender = 4;
inline void Employee::clear_gender() {
  gender_ = 0;
}
inline ::staffbook::Employee_GenderType Employee::_internal_gender() const {
  return static_cast< ::staffbook::Employee_GenderType >(gender_);
}
inline ::staffbook::Employee_GenderType Employee::gender() const {
  // @@protoc_insertion_point(field_get:staffbook.Employee.gender)
  return _internal_gender();
}
inline void Employee::_internal_set_gender(::staffbook::Employee_GenderType value) {
  
  gender_ = value;
}
inline void Employee::set_gender(::staffbook::Employee_GenderType value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:staffbook.Employee.gender)
}

// string email = 5;
inline void Employee::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& Employee::email() const {
  // @@protoc_insertion_point(field_get:staffbook.Employee.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Employee::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:staffbook.Employee.email)
}
inline std::string* Employee::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:staffbook.Employee.email)
  return _s;
}
inline const std::string& Employee::_internal_email() const {
  return email_.Get();
}
inline void Employee::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Employee::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Employee::release_email() {
  // @@protoc_insertion_point(field_release:staffbook.Employee.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Employee::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:staffbook.Employee.email)
}

// string phone = 6;
inline void Employee::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& Employee::phone() const {
  // @@protoc_insertion_point(field_get:staffbook.Employee.phone)
  return _internal_phone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Employee::set_phone(ArgT0&& arg0, ArgT... args) {
 
 phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:staffbook.Employee.phone)
}
inline std::string* Employee::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:staffbook.Employee.phone)
  return _s;
}
inline const std::string& Employee::_internal_phone() const {
  return phone_.Get();
}
inline void Employee::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Employee::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Employee::release_phone() {
  // @@protoc_insertion_point(field_release:staffbook.Employee.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Employee::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (phone_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    phone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:staffbook.Employee.phone)
}

// .google.protobuf.Timestamp last_updated = 7;
inline bool Employee::_internal_has_last_updated() const {
  return this != internal_default_instance() && last_updated_ != nullptr;
}
inline bool Employee::has_last_updated() const {
  return _internal_has_last_updated();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Employee::_internal_last_updated() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = last_updated_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Employee::last_updated() const {
  // @@protoc_insertion_point(field_get:staffbook.Employee.last_updated)
  return _internal_last_updated();
}
inline void Employee::unsafe_arena_set_allocated_last_updated(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  last_updated_ = last_updated;
  if (last_updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:staffbook.Employee.last_updated)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Employee::release_last_updated() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Employee::unsafe_arena_release_last_updated() {
  // @@protoc_insertion_point(field_release:staffbook.Employee.last_updated)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Employee::_internal_mutable_last_updated() {
  
  if (last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_updated_ = p;
  }
  return last_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Employee::mutable_last_updated() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:staffbook.Employee.last_updated)
  return _msg;
}
inline void Employee::set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated));
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:staffbook.Employee.last_updated)
}

// -------------------------------------------------------------------

// StaffBook

// repeated .staffbook.Employee employees = 1;
inline int StaffBook::_internal_employees_size() const {
  return employees_.size();
}
inline int StaffBook::employees_size() const {
  return _internal_employees_size();
}
inline void StaffBook::clear_employees() {
  employees_.Clear();
}
inline ::staffbook::Employee* StaffBook::mutable_employees(int index) {
  // @@protoc_insertion_point(field_mutable:staffbook.StaffBook.employees)
  return employees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::staffbook::Employee >*
StaffBook::mutable_employees() {
  // @@protoc_insertion_point(field_mutable_list:staffbook.StaffBook.employees)
  return &employees_;
}
inline const ::staffbook::Employee& StaffBook::_internal_employees(int index) const {
  return employees_.Get(index);
}
inline const ::staffbook::Employee& StaffBook::employees(int index) const {
  // @@protoc_insertion_point(field_get:staffbook.StaffBook.employees)
  return _internal_employees(index);
}
inline ::staffbook::Employee* StaffBook::_internal_add_employees() {
  return employees_.Add();
}
inline ::staffbook::Employee* StaffBook::add_employees() {
  ::staffbook::Employee* _add = _internal_add_employees();
  // @@protoc_insertion_point(field_add:staffbook.StaffBook.employees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::staffbook::Employee >&
StaffBook::employees() const {
  // @@protoc_insertion_point(field_list:staffbook.StaffBook.employees)
  return employees_;
}

// -------------------------------------------------------------------

// IDRequest

// string id = 1;
inline void IDRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& IDRequest::id() const {
  // @@protoc_insertion_point(field_get:staffbook.IDRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IDRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:staffbook.IDRequest.id)
}
inline std::string* IDRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:staffbook.IDRequest.id)
  return _s;
}
inline const std::string& IDRequest::_internal_id() const {
  return id_.Get();
}
inline void IDRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IDRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IDRequest::release_id() {
  // @@protoc_insertion_point(field_release:staffbook.IDRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IDRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:staffbook.IDRequest.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace staffbook

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::staffbook::Employee_GenderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::staffbook::Employee_GenderType>() {
  return ::staffbook::Employee_GenderType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_staffbook_2eproto
